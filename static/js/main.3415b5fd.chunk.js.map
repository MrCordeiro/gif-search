{"version":3,"sources":["components/SearchForm.js","components/Gif.js","components/NoGifs.js","components/GifList.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","state","searchText","onSearchChange","e","setState","target","value","handleSubmit","preventDefault","props","onSearch","query","currentTarget","reset","className","onSubmit","this","htmlFor","type","onChange","name","ref","input","placeholder","id","Component","Gif","src","url","alt","NoGifs","GifList","gifs","results","data","length","map","gif","images","fixed_height","key","App","performSearch","axios","get","then","response","loading","catch","error","console","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6SAEqBA,E,2MACjBC,MAAQ,CACJC,WAAY,I,EAGhBC,eAAiB,SAAAC,GACb,EAAKC,SAAS,CAAEH,WAAYE,EAAEE,OAAOC,S,EAGzCC,aAAe,SAAAJ,GACXA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKC,MAAML,OAC/BH,EAAES,cAAcC,S,wEAGV,IAAD,OACL,OACI,0BAAMC,UAAU,cAAcC,SAAUC,KAAKT,cACzC,2BAAOO,UAAU,YAAYG,QAAQ,UAArC,UAGA,2BACIC,KAAK,SACLC,SAAUH,KAAKd,eACfkB,KAAK,SACLC,IAAK,SAACC,GAAD,OAAW,EAAKX,MAAQW,GAC7BC,YAAY,cAEhB,4BAAQL,KAAK,SAASM,GAAG,SAASV,UAAU,iBACxC,uBAAGA,UAAU,6BAAb,gB,GA7BoBW,aCMzBC,EANH,SAAAjB,GAAK,OACf,wBAAIK,UAAU,YACZ,yBAAKa,IAAKlB,EAAMmB,IAAKC,IAAI,OCKdC,EAPA,SAAArB,GAAK,OAClB,wBAAIK,UAAU,WACZ,uBAAGA,UAAU,2BAAb,+BACA,mECkBWiB,EAnBC,SAAAtB,GAEd,IACIuB,EADEC,EAAUxB,EAAMyB,KAUtB,OAPEF,EADEC,EAAQE,OAAS,EACZF,EAAQG,KAAI,SAAAC,GAAG,OACrB,kBAAC,EAAD,CAAKT,IAAKS,EAAIC,OAAOC,aAAaX,IAAKY,IAAKH,EAAIb,QAG1C,kBAAC,EAAD,MAIP,wBAAIV,UAAU,YACXkB,ICZcS,E,YAEnB,aAAe,IAAD,8BACZ,+CAWFC,cAAgB,WAAqB,IAApB/B,EAAmB,uDAAX,OAavBgC,IAAMC,IAAN,gDAAmDjC,EAAnD,oCACCkC,MAAK,SAAAC,GACJ,EAAK1C,SAAS,CACZ4B,KAAMc,EAASZ,KAAKA,KACpBa,SAAS,OAGZC,OAAM,SAAAC,GACLC,QAAQD,MAAM,kCAAmCA,OA/BnD,EAAKjD,MAAQ,CACXgC,KAAM,GACNe,SAAS,GAJC,E,iFASZ/B,KAAK0B,kB,+BA6BL,OACE,6BACE,yBAAK5B,UAAU,eACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,cAAd,aACA,kBAAC,EAAD,CAAYJ,SAAUM,KAAK0B,kBAG/B,yBAAK5B,UAAU,gBAEVE,KAAKhB,MAAM+C,QACV,yCACA,kBAAC,EAAD,CAASb,KAAMlB,KAAKhB,MAAMgC,a,GApDPP,aCMb0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMgB,c","file":"static/js/main.3415b5fd.chunk.js","sourcesContent":["import React, { Component } from \"react\"\n\nexport default class SearchForm extends Component {\n    state = {\n        searchText: \"\"\n    }\n\n    onSearchChange = e => {\n        this.setState({ searchText: e.target.value });\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.onSearch(this.query.value);\n        e.currentTarget.reset();\n    }\n\n    render() {\n        return (\n            <form className=\"search-form\" onSubmit={this.handleSubmit}>\n                <label className=\"is-hidden\" htmlFor=\"search\">\n                    Search\n                </label>\n                <input\n                    type=\"search\"\n                    onChange={this.onSearchChange}\n                    name=\"search\"\n                    ref={(input) => this.query = input}\n                    placeholder=\"Search...\"\n                />\n                <button type=\"submit\" id=\"submit\" className=\"search-button\">\n                    <i className=\"material-icons icn-search\">search</i>\n                </button>\n            </form>\n        )\n    }\n}\n","import React from 'react';\n\nconst Gif = props => (\n  <li className=\"gif-wrap\">\n    <img src={props.url} alt=\"\"/>\n  </li>\n);\n\nexport default Gif;","import React from 'react';\n\nconst NoGifs = props => (\n  <li className='no-gifs'>\n    <i className=\"material-icons icon-gif\">sentiment_very_dissatisfied</i>\n    <h3>Sorry, no GIFs match your search.</h3>\n  </li>\n);\n\nexport default NoGifs;","import React from 'react';\nimport Gif from './Gif';\nimport NoGifs from './NoGifs';\n\nconst GifList = props => {\n\n  const results = props.data;\n  let gifs;\n  if (results.length > 0) {\n    gifs = results.map(gif =>\n     <Gif url={gif.images.fixed_height.url} key={gif.id} />\n    );\n  } else {\n    gifs = <NoGifs />\n  }\n\n  return(\n    <ul className=\"gif-list\">\n      {gifs}\n    </ul>\n  );\n}\n\nexport default GifList;\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport SearchForm from './components/SearchForm';\nimport GifList from './components/GifList';\n\nexport default class App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      gifs: [],\n      loading: true\n    }\n  }\n\n  componentDidMount() {\n    this.performSearch();\n  }\n\n  performSearch = (query = 'cats') => {\n    // FETCH OPTION\n\n    // fetch('http://api.giphy.com/v1/gifs/trending?api_key=dc6zaTOxFJmzC')\n    // .then(response => response.json())\n    // .then(responseData => {\n    //   this.setState({gifs: responseData.data});\n    // })\n    // .catch(error => {\n    //   console.error('Error fetching and parsing data', error);\n    // });\n\n    // AXIOS OPTION\n    axios.get(`http://api.giphy.com/v1/gifs/search?q=${query}&limit=24&api_key=dc6zaTOxFJmzC`)\n    .then(response => {\n      this.setState({\n        gifs: response.data.data,\n        loading: false\n      });\n    })\n    .catch(error => {\n      console.error('Error fetching and parsing data', error);\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"main-header\">\n          <div className=\"inner\">\n            <h1 className=\"main-title\">GifSearch</h1>\n            <SearchForm onSearch={this.performSearch}/>\n          </div>\n        </div>\n        <div className=\"main-content\">\n          {\n            (this.state.loading)\n            ? <p>Loading...</p>\n            : <GifList data={this.state.gifs}/>\n          }\n\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}